
R version 3.0.0 (2013-04-03) -- "Masked Marvel"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## selectWhereZero test
> ##
> ## test for the 'Issue 6' on the Google Code issue log
> ## Buffer overflow when numeric condition is given for a character variable
> ## Issue 19 is also on this test script.
> ## 
> ## This test script appeared at r111 by dirk.eddelbuettel on Oct 9, 2009
> ## 
> 
> ## only run this if this env.var is set correctly
> if (Sys.getenv("POSTGRES_USER") != "" & Sys.getenv("POSTGRES_HOST") != "" & Sys.getenv("POSTGRES_DATABASE") != "") {
+ 
+     ## try to load our module and abort if this fails
+     stopifnot(require(RPostgreSQL))
+     stopifnot(require(datasets))
+ 
+     ## load the PostgresSQL driver
+     drv <- dbDriver("PostgreSQL")
+ 
+     ## connect to the default db
+     con <- dbConnect(drv,
+                      user=Sys.getenv("POSTGRES_USER"),
+                      password=Sys.getenv("POSTGRES_PASSWD"),
+                      host=Sys.getenv("POSTGRES_HOST"),
+                      dbname=Sys.getenv("POSTGRES_DATABASE"),
+                      port=ifelse((p<-Sys.getenv("POSTGRES_PORT"))!="", p, 5432))
+ 
+ 
+     if (dbExistsTable(con, "tmpirisdata")) {
+         print("Removing tmpirisdata\n")
+         dbRemoveTable(con, "tmpirisdata")
+     }
+ 
+     dbWriteTable(con, "tmpirisdata", iris)
+ 
+     ## run a simple query and show the query result
+     cat("Testing if erroneous SQL cause normal error without segmentation fault.\n")
+ 
+     res <- dbGetQuery(con, "select * from tmpirisdata where \"Species\"=0")
+     print(res)
+ 
+     ## cleanup
+     if (dbExistsTable(con, "tmpirisdata")) {
+         print("Removing tmpirisdata\n")
+         dbRemoveTable(con, "tmpirisdata")
+     }
+ 
+     ## and disconnect
+     dbDisconnect(con)
+     cat("PASS:  reached to the end of the test code without segmentation fault\n")
+     ## this test is success if we reach here regardless of any other message
+ }else{
+     cat("Skip.\n")
+ }
Loading required package: RPostgreSQL
Loading required package: DBI
Testing if erroneous SQL cause normal error without segmentation fault.
Error in postgresqlExecStatement(conn, statement, ...) : 
  RS-DBI driver: (could not Retrieve the result : ERROR:  operator does not exist: text = integer
LINE 1: select * from tmpirisdata where "Species"=0
                                                 ^
HINT:  No operator matches the given name and argument type(s). You might need to add explicit type casts.
)
NULL
[1] "Removing tmpirisdata\n"
PASS:  reached to the end of the test code without segmentation fault
Warning message:
In postgresqlQuickSQL(conn, statement, ...) :
  Could not create execute: select * from tmpirisdata where "Species"=0
> 
> proc.time()
   user  system elapsed 
  0.448   0.031   0.525 
